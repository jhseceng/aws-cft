AWSTemplateFormatVersion: '2010-09-09'
Description: Creates VPC, Subnets, Route Tables, SG, External Application ExLB, ASG
  for PANW firewall and Lambda Infrastructure for the VM-Series firewall
Parameters:
  VPCName:
    Description: Name of the newly created VPC
    Type: String
    MinLength: '6'
    MaxLength: '24'
    Default: panwVPC
  SubscriberAWSAccountNumber:
    Description: >-
      Subscriber AWS Account number(s) required for Assume Role, Provide comma separated
      valid 12-digit AWS Account Number. Note: While doing stack Update, add account
      numbers to the existing account numbers. If you delete the existing account
      numbers, those accounts will no longer be subscribed with Firewall deployment
    Type: String
  KeyPANWFirewall:
    Type: String
    Description: API Key associated to username/password of the VM-Series Firewall.
      By default it is pandemo/demopassword
    Default: LUFRPT1Zd2pYUGpkMUNrVEZlb3hROEQyUm95dXNGRkU9N0d4RGpTN2VZaVZYMVVoS253U0p6dlk3MkM0SDFySEh2UUR4Y3hzK2g3ST0=
    AllowedPattern: '[\S0-9a-zA-Z]+'
    ConstraintDescription: The PAN FW API key is required.
    NoEcho: 'true'
  KeyPANWPanorama:
    Type: String
    Description: API Key associated to username/password of the Panorama.
    NoEcho: 'true'
    Default: LUFRPT1Zd2pYUGpkMUNrVEZlb3hROEQyUm95dXNGRkU9N0d4RGpTN2VZaVZYMVVoS253U0p6dlk3MkM0SDFySEh2UUR4Y3hzK2g3ST0=
  PanoramaAdminUser:
    Type: String
    Description: Enter the admin username for the Panorama instance
    MinLength: '3'
    MaxLength: '63'
    Default: pandemo
  BootstrapS3Bucket:
    Type: String
    Description: Enter the name of the Bootstrap S3 bucket for the VM-Series firewall
    MinLength: '3'
    MaxLength: '63'
    Default: asgv21-justin
  PanFwAmiId:
    Type: AWS::EC2::Image::Id
    Description: 'Link to Ami Id lookup table: https://www.paloaltonetworks.com/documentation/global/compatibility-matrix/vm-series-firewalls/aws-cft-amazon-machine-images-ami-list'
  ELBName:
    Type: String
    Description: Enter the name of the external Application Load Balancer
    Default: public-exlb
    MinLength: '3'
    MaxLength: '12'
  KeyName:
    Description: Amazon EC2 Key Pair
    Type: AWS::EC2::KeyPair::KeyName
  SSHLocation:
    Description: Restrict SSH access to the VM-Series firewall (enter a valid CIDR
      range in the format of x.x.x.x/x)
    Type: String
    MinLength: '9'
    MaxLength: '18'
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid CIDR range in the format of x.x.x.x/x
  NumberOfAZs:
    Description: Total Number of AZs which will be used in this deployment (Min 2
      and Max 4 depending on az availability)
    Type: Number
    MinValue: '2'
    Default: '2'
    MaxValue: '4'
  VpcAzs:
    Type: List<AWS::EC2::AvailabilityZone::Name>
    Description: Enter the list of Availability Zones (Based on Number of AZs above)
  LambdaS3Bucket:
    Type: String
    Description: VM-Series firewall Lambda/Scripts/CFT template S3 Bucket or your
      own in the same region
    Default: asgv21-justin
    MinLength: '3'
    MaxLength: '63'
  ELBType:
    Type: String
    Default: application
    AllowedValues:
      - application
      - network
    Description: Choose the type of external load balancer required in the firewall
      template
  TGWID:
    Type: String
    Default: tgw-08ba52ffc2d66b864
    Description: Transit Gateway resource ID (i.e. tgw-xxxxxx)
    AllowedPattern: .+
  PanoramaVPCAttachmentId:
    Type: String
    Default: tgw-attach-0bb8e927237e02390
    Description: AttachmentId of Mgt VPC which contains panorama
  AssociatedTGWRouteTableID:
    Type: String
    Default: tgw-rtb-086a2d171894f2d90
    Description: Transit Gateway Route Table associated with security VPCs
      (i.e. tgw-rtb-xxxxxx)
    AllowedPattern: .+
  PropagatedTGWRouteTableID:
    Type: String
    Default: tgw-rtb-0aa9a19530e896ce8
    Description: Transit Gateway Route Table associated with spoke VPCs
      VPC attachment (i.e. tgw-rtb-xxxxxx)
    AllowedPattern: .+
  Debug:
    Type: String
    Default: 'No'
    AllowedValues:
      - 'Yes'
      - 'No'
    Description: Enable/Disable debug. Default is disabled
  VpcSummaryRoute:
    Description: This is a hub vpc, use rfc-1918
    Type: String
    Default: rfc-1918
    AllowedValues:
      - rfc-1918
      - default
Mappings:
  BucketRegionMap:
    LambdaRegion:
      DefaultRegion: panw-aws-autoscale-v21
  KeyMap:
    Key:
      Key: panw-aws.zip
  CidrBlockMap:
    VpcCidrBlock:
      CidrBlock: 192.168.0.0/20
    MgmtCidrBlock:
      CidrBlockAz1: 192.168.0.0/28
      CidrBlockAz2: 192.168.0.16/28

    UntrustCidrBlock:
      CidrBlockAz1: 192.168.0.32/28
      CidrBlockAz2: 192.168.0.48/28

    TrustCidrBlock:
      CidrBlockAz1: 192.168.0.64/28
      CidrBlockAz2: 192.168.0.80/28

    TGWCidrBlock:
      CidrBlockAz1: 192.168.0.96/28
      CidrBlockAz2: 192.168.0.112/28

    NatGwCidrBlock:
      CidrBlockAz1: 192.168.0.128/28
      CidrBlockAz2: 192.168.0.144/28

    LambdaCidrBlock:
      CidrBlockAz1: 192.168.0.160/28
      CidrBlockAz2: 192.168.0.176/28

  FWInstanceTypeMap:
    TypeM4:
      M4xlarge: m4.xlarge
      M44xlarge: m4.4xlarge
    TypeM3:
      M3xlarge: m3.xlarge
      M32xlarge: m3.2xlarge
    TypeC4:
      C4xlarge: c4.xlarge
      C42xlarge: c4.2xlarge
      C44xlarge: c4.4xlarge
    TypeC3:
      C3xlarge: c3.xlarge
      C32xlarge: c3.2xlarge
      C34xlarge: c3.4xlarge
  ASGScaleMap:
    MinInstances:
      ASG: '2'
    MaxInstances:
      ASG: '5'
    ScaleUpThreshold:
      ASG: '80'
    ScaleDownThreshold:
      ASG: '20'
    ScalingParam:
      CPU: DataPlaneCPUUtilizationPct
      AS: panSessionActive
      SU: panSessionUtilization
      SSPU: panSessionSslProxyUtilization
      GPU: panGPGatewayUtilizationPct
      GPAT: panGPGWUtilizationActiveTunnels
      DPB: DataPlanePacketBufferUtilization
    ScalingPeriod:
      ASG: '900'
Conditions:
  PANWScript: !Equals
    - !Ref 'LambdaS3Bucket'
    - !FindInMap
      - BucketRegionMap
      - LambdaRegion
      - DefaultRegion

  CreateELBTypeApp: !Equals
    - !Ref 'ELBType'
    - application
  CreateELBTypeNet: !Equals
    - !Ref 'ELBType'
    - network
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: VPC Configuration
        Parameters:
          - VPCName
          - NumberOfAZs
          - VpcAzs
          - ELBType
      - Label:
          default: VM-Series firewall Instance configuration
        Parameters:
          - PanFwAmiId
          - KeyName
          - SSHLocation
          - Debug
      - Label:
          default: S3 Bucket details
        Parameters:
          - BootstrapS3Bucket
          - LambdaS3Bucket
      - Label:
          default: VM-Series API Key and Panorama username
        Parameters:
          - KeyPANWFirewall
          - KeyPANWPanorama
          - PanoramaAdminUser
      - Label:
          default: Cross-account configuration
        Parameters:
          - SubscriberAWSAccountNumber
      - Label:
          default: Transit Gateway Parameters
        Parameters:
          - TGWID
          - AssociatedTGWRouteTableID
          - PropagatedTGWRouteTableID
    ParameterLabels:
      PanFwAmiId:
        default: 'AMIId of PANFW Image:'
      KeyName:
        default: 'Key pair:'
      SSHLocation:
        default: 'SSH From:'
      BootstrapS3Bucket:
        default: Bootstrap bucket for VM-Series firewalls
      LambdaS3Bucket:
        default: 'S3 Bucket Name for Lambda Code:'
      KeyPANWFirewall:
        default: 'API Key for Firewall:'
      KeyPANWPanorama:
        default: 'API Key for Panorama:'
      PanoramaAdminUser:
        default: 'Admin username for Panorama:'
      ELBName:
        default: 'Name of External Application Load Balancer:'
      VpcAzs:
        default: 'Select  AZs:'
      AZSubnetIDUntrust:
        default: 'Subnet ID of Untrust Interface:'
      AZSubnetIDTrust:
        default: 'Subnet ID of Trust Interface:'
      TGWID:
        default: 'Transit Gateway ID:'
      AssociatedTGWRouteTableID:
        default: Transit Gateway Route Table - TO ASSOCIATE
      PropagatedTGWRouteTableID:
        default: Transit Gateway Route Table - TO PROPAGATE
      Debug:
        default: 'Enable Debug Log:'
      SubscriberAWSAccountNumber:
        default: 'Subscriber Account Number(s):'
Resources:
  ASLambdalayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      CompatibleRuntimes:
        - python3.6
        - python3.7
      Content:
        S3Bucket: !Ref 'BootstrapS3Bucket'
        S3Key: layer.zip
      Description: Autoscale Layer
      LayerName: as-layer
      LicenseInfo: MIT
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !FindInMap
        - CidrBlockMap
        - VpcCidrBlock
        - CidrBlock
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Network
          Value: MGMT
        - Key: Name
          Value: !Ref 'VPCName'
  LambdaSubnetAz1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - '0'
        - !Ref 'VpcAzs'
      MapPublicIpOnLaunch: true
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap
        - CidrBlockMap
        - LambdaCidrBlock
        - CidrBlockAz1
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Network
          Value: LambdaFunction
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - LambdaSubnetAz1
    DependsOn:
      - VPC
  LambdaSubnetAz2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - '1'
        - !Ref 'VpcAzs'
      MapPublicIpOnLaunch: true
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap
        - CidrBlockMap
        - LambdaCidrBlock
        - CidrBlockAz2
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Network
          Value: LambdaFunction
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - LambdaSubnetAz2
    DependsOn:
      - VPC

  LambdaRouteTableAz1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - LambdaRouteTableAz1
    DependsOn:
      - VPC
  LambdaRouteTableAz2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - LambdaRouteTableAz2
    DependsOn:
      - VPC

  NATGWSubnetAz1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - '0'
        - !Ref 'VpcAzs'
      MapPublicIpOnLaunch: true
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap
        - CidrBlockMap
        - NatGwCidrBlock
        - CidrBlockAz1
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Network
          Value: NATGW
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - NATGWSubnetAz1
    DependsOn:
      - VPC
  NATGWSubnetAz2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - '1'
        - !Ref 'VpcAzs'
      MapPublicIpOnLaunch: true
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap
        - CidrBlockMap
        - NatGwCidrBlock
        - CidrBlockAz2
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Network
          Value: NATGW
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - NATGWSubnetAz2
    DependsOn:
      - VPC

  EIP1:
    Type: AWS::EC2::EIP
    Properties:
      Domain: VPC
    DependsOn:
      - VPC
      - GatewayToInternet
      - InternetGateway
  EIP2:
    Type: AWS::EC2::EIP
    Properties:
      Domain: VPC
    DependsOn:
      - VPC
      - GatewayToInternet
      - InternetGateway

  NAT1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt 'EIP1.AllocationId'
      SubnetId: !Ref 'NATGWSubnetAz1'
    DependsOn:
      - VPC
      - EIP1
      - NATGWSubnetAz1
      - GatewayToInternet
  NAT2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt 'EIP2.AllocationId'
      SubnetId: !Ref 'NATGWSubnetAz2'
    DependsOn:
      - VPC
      - EIP2
      - NATGWSubnetAz2
      - GatewayToInternet

  TGWSubnetAz1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - '0'
        - !Ref 'VpcAzs'
      MapPublicIpOnLaunch: false
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap
        - CidrBlockMap
        - TGWCidrBlock
        - CidrBlockAz1
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Network
          Value: TGW
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - tgw-az1
  TGWSubnetAz2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - '1'
        - !Ref 'VpcAzs'
      MapPublicIpOnLaunch: false
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap
        - CidrBlockMap
        - TGWCidrBlock
        - CidrBlockAz2
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Network
          Value: TGW
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - tgw-az2

  TGWAttachment:
    Type: AWS::EC2::TransitGatewayAttachment
    Properties:
      SubnetIds:
        - !Ref 'TGWSubnetAz1'
        - !Ref 'TGWSubnetAz2'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - attachment
      TransitGatewayId: !Ref 'TGWID'
      VpcId: !Ref 'VPC'
  AssociateTGWAttachment:
    Type: AWS::EC2::TransitGatewayRouteTableAssociation
    Properties:
      TransitGatewayAttachmentId: !Ref 'TGWAttachment'
      TransitGatewayRouteTableId: !Ref 'AssociatedTGWRouteTableID'

  PropagateTGWRouteTableID2:
    Type: AWS::EC2::TransitGatewayRouteTablePropagation
    Properties:
      TransitGatewayAttachmentId: !Ref 'PanoramaVPCAttachmentId'
      TransitGatewayRouteTableId: !Ref 'AssociatedTGWRouteTableID'
  MGMTSubnetAz1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - '0'
        - !Ref 'VpcAzs'
      MapPublicIpOnLaunch: true
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap
        - CidrBlockMap
        - MgmtCidrBlock
        - CidrBlockAz1
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Network
          Value: MGMT
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - MGMTSubnetAz1
    DependsOn:
      - VPC
  MGMTSubnetAz2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - '1'
        - !Ref 'VpcAzs'
      MapPublicIpOnLaunch: true
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap
        - CidrBlockMap
        - MgmtCidrBlock
        - CidrBlockAz2
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Network
          Value: MGMT
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - MGMTSubnetAz2
    DependsOn:
      - VPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Network
          Value: MGMT
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - InternetGateway
  GatewayToInternet:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref 'VPC'
      InternetGatewayId: !Ref 'InternetGateway'
    DependsOn:
      - InternetGateway
  NATGWRouteTableAz1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - NATGWRouteTableAz1
    DependsOn:
      - VPC
  NATGWRouteTableAz2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - NATGWRouteTableAz2
    DependsOn:
      - VPC

  NATGWRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref 'NATGWRouteTableAz1'
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref 'InternetGateway'
    DependsOn:
      - NATGWRouteTableAz1
      - GatewayToInternet
  NATGWRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref 'NATGWRouteTableAz2'
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref 'InternetGateway'
    DependsOn:
      - NATGWRouteTableAz2
      - GatewayToInternet

  MGMTRouteTableAz1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - MGMTRouteTableAz1
    DependsOn:
      - VPC
  MGMTRouteTableAz2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - MGMTRouteTableAz2
    DependsOn:
      - VPC

  LambdaRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref 'LambdaRouteTableAz1'
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref 'NAT1'
    DependsOn:
      - NAT1
  LambdaRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref 'LambdaRouteTableAz2'
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref 'NAT2'
    DependsOn:
      - NAT2

  MGMTRouteNAT1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref 'MGMTRouteTableAz1'
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref 'NAT1'
    DependsOn:
      - NAT1
  MGMTRouteNAT2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref 'MGMTRouteTableAz2'
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref 'NAT2'
    DependsOn:
      - NAT2

  LambdaSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'LambdaSubnetAz1'
      RouteTableId: !Ref 'LambdaRouteTableAz1'
    DependsOn:
      - LambdaRouteTableAz1
      - LambdaSubnetAz1
  LambdaSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'LambdaSubnetAz2'
      RouteTableId: !Ref 'LambdaRouteTableAz2'
    DependsOn:
      - LambdaRouteTableAz2
      - LambdaSubnetAz2

  NAT1SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'NATGWSubnetAz1'
      RouteTableId: !Ref 'NATGWRouteTableAz1'
    DependsOn:
      - NATGWRouteTableAz1
      - NATGWSubnetAz1
  NAT2SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'NATGWSubnetAz2'
      RouteTableId: !Ref 'NATGWRouteTableAz2'
    DependsOn:
      - NATGWRouteTableAz2
      - NATGWSubnetAz2

  MGMTSubnetRouteTableAssociationNAT1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'MGMTSubnetAz1'
      RouteTableId: !Ref 'MGMTRouteTableAz1'
    DependsOn:
      - MGMTRouteNAT1
      - MGMTSubnetAz1
  MGMTSubnetRouteTableAssociationNAT2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'MGMTSubnetAz2'
      RouteTableId: !Ref 'MGMTRouteTableAz2'
    DependsOn:
      - MGMTSubnetAz2

  UNTRUSTSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - '0'
        - !Ref 'VpcAzs'
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap
        - CidrBlockMap
        - UntrustCidrBlock
        - CidrBlockAz1
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Network
          Value: UNTRUST
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - UNTRUSTSubnet1
    DependsOn:
      - VPC
  UNTRUSTSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - '1'
        - !Ref 'VpcAzs'
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap
        - CidrBlockMap
        - UntrustCidrBlock
        - CidrBlockAz2
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Network
          Value: UNTRUST
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - UNTRUSTSubnet2
    DependsOn:
      - VPC

  UNTRUSTRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Network
          Value: UNTRUST
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - UNTRUSTRouteTable
  UNTRUSTRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref 'UNTRUSTRouteTable'
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref 'InternetGateway'
    DependsOn:
      - GatewayToInternet
      - UNTRUSTRouteTable
  UNTRUSTSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'UNTRUSTSubnet1'
      RouteTableId: !Ref 'UNTRUSTRouteTable'
    DependsOn:
      - UNTRUSTRoute
      - UNTRUSTSubnet1
  UNTRUSTSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'UNTRUSTSubnet2'
      RouteTableId: !Ref 'UNTRUSTRouteTable'
    DependsOn:
      - UNTRUSTRoute
      - UNTRUSTSubnet2

  TRUSTSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - '0'
        - !Ref 'VpcAzs'
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap
        - CidrBlockMap
        - TrustCidrBlock
        - CidrBlockAz1
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Network
          Value: TRUST
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - TRUSTSubnet1
    DependsOn:
      - VPC
      - InternetGateway
  TRUSTSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - '1'
        - !Ref 'VpcAzs'
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap
        - CidrBlockMap
        - TrustCidrBlock
        - CidrBlockAz2
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Network
          Value: TRUST
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - TRUSTSubnet2
    DependsOn:
      - VPC
      - InternetGateway

  TrustRouteTableAz1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Network
          Value: TRUST
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - TrustRouteTableAz1
    DependsOn:
      - VPC
  TrustRouteTableAz2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Network
          Value: TRUST
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - TrustRouteTableAz2
    DependsOn:
      - VPC



  TRUSTSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'TRUSTSubnet1'
      RouteTableId: !Ref 'TrustRouteTableAz1'
    DependsOn:
      - TRUSTSubnet1
  TRUSTSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'TRUSTSubnet2'
      RouteTableId: !Ref 'TrustRouteTableAz2'
    DependsOn:
      - TRUSTSubnet2

  PublicLoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Public ALB Security Group with HTTP access on port 80 from
        the internet
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - PublicLoadBalancerSecurityGroup
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: '0.0.0.0/0'
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '2000'
          CidrIp: '0.0.0.0/0'
    DependsOn:
      - VPC
  PublicLoadBanlancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !If
            - CreateELBTypeApp
            - !Ref 'PublicLoadBalancerTargetGroup'
            - !Ref 'NetworkLoadBalancerTargetGroup'
      LoadBalancerArn: !Ref 'PublicLoadBalancer'
      Port: '80'
      Protocol: !If
        - CreateELBTypeApp
        - HTTP
        - TCP
  PublicLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Ref 'ELBName'
      Type: !Ref 'ELBType'
      SecurityGroups:
        - !If
          - CreateELBTypeApp
          - !Ref 'PublicLoadBalancerSecurityGroup'
          - !Ref 'AWS::NoValue'
      Subnets:
        - !Ref 'UNTRUSTSubnet1'
        - !Ref 'UNTRUSTSubnet2'
      Scheme: internet-facing
    DependsOn:
      - VPC
      - GatewayToInternet
      - PublicLoadBalancerSecurityGroup
      - UNTRUSTSubnet1
      - UNTRUSTSubnet2
  PublicLoadBalancerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Condition: CreateELBTypeApp
    Properties:
      HealthCheckIntervalSeconds: 60
      UnhealthyThresholdCount: 10
      HealthCheckProtocol: HTTP
      HealthCheckPort: '81'
      HealthCheckPath: /index.html
      Matcher:
        HttpCode: '200'
      Port: 81
      Protocol: HTTP
      VpcId: !Ref 'VPC'
  NetworkLoadBalancerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Condition: CreateELBTypeNet
    Properties:
      Port: '81'
      Protocol: TCP
      UnhealthyThresholdCount: '3'
      VpcId: !Ref 'VPC'
  NetworkLoadBalancerQueue:
    Type: AWS::SQS::Queue
    DependsOn:
      - VPC
  S3Endpoint:
    Type: AWS::EC2::VPCEndpoint

    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: '*'
            Action: s3:ListBucket
            Resource: !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref 'BootstrapS3Bucket'
          - Effect: Allow
            Principal: '*'
            Action: s3:GetObject
            Resource: !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref 'BootstrapS3Bucket'
                - /*
      RouteTableIds:
        - !Ref 'UNTRUSTRouteTable'
      ServiceName: !Join
        - ''
        - - com.amazonaws.
          - !Ref 'AWS::Region'
          - .s3
      VpcId: !Ref 'VPC'

  FirewallBootstrapRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: FirewallBootstrapRolePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: s3:ListBucket
                Resource: !Join
                  - ''
                  - - 'arn:aws:s3:::'
                    - !Ref 'BootstrapS3Bucket'
              - Effect: Allow
                Action: s3:GetObject
                Resource: !Join
                  - ''
                  - - 'arn:aws:s3:::'
                    - !Ref 'BootstrapS3Bucket'
                    - /*
              - Effect: Allow
                Action:
                  - cloudwatch:*
                Resource:
                  - '*'
  FirewallBootstrapInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref 'FirewallBootstrapRole'
    DependsOn:
      - FirewallBootstrapRole
  MgmtSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH to MGMT interface
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Name
          Value: !Join
            - ''
            - - !Ref 'AWS::StackName'
              - MgmtSecurityGroup
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: !Ref 'SSHLocation'
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: !Ref 'SSHLocation'
        - IpProtocol: '-1'
          FromPort: '-1'
          ToPort: '-1'
          CidrIp: !FindInMap
            - CidrBlockMap
            - VpcCidrBlock
            - CidrBlock
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: !FindInMap
            - CidrBlockMap
            - VpcCidrBlock
            - CidrBlock
      SecurityGroupEgress:
        - IpProtocol: '-1'
          FromPort: '-1'
          ToPort: '-1'
          CidrIp: '0.0.0.0/0'
  UntrustSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for Untrust interface
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Name
          Value: !Join
            - ''
            - - !Ref 'AWS::StackName'
              - UntrustSecurityGroup
      SecurityGroupIngress:
        - IpProtocol: '-1'
          FromPort: '-1'
          ToPort: '-1'
          CidrIp: '0.0.0.0/0'
      SecurityGroupEgress:
        - IpProtocol: '-1'
          FromPort: '-1'
          ToPort: '-1'
          CidrIp: '0.0.0.0/0'
  TrustSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for trust interface
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Name
          Value: !Join
            - ''
            - - !Ref 'AWS::StackName'
              - TrustSecurityGroup
      SecurityGroupIngress:
        - IpProtocol: '-1'
          FromPort: '-1'
          ToPort: '-1'
          CidrIp: '0.0.0.0/0'
      SecurityGroupEgress:
        - IpProtocol: '-1'
          FromPort: '-1'
          ToPort: '-1'
          CidrIp: '0.0.0.0/0'
  VPCSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for within VPC
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Name
          Value: !Join
            - ''
            - - !Ref 'AWS::StackName'
              - VPCSecurityGroup
      SecurityGroupIngress:
        - IpProtocol: '-1'
          FromPort: '-1'
          ToPort: '-1'
          CidrIp: '0.0.0.0/0'
      SecurityGroupEgress:
        - IpProtocol: '-1'
          FromPort: '-1'
          ToPort: '-1'
          CidrIp: '0.0.0.0/0'
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: LambdaExecutionRolePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: s3:ListBucket
                Resource: !Join
                  - ''
                  - - 'arn:aws:s3:::'
                    - !Ref 'BootstrapS3Bucket'
                    - /*
              - Effect: Allow
                Action: s3:GetObject
                Resource: !Join
                  - ''
                  - - 'arn:aws:s3:::'
                    - !Ref 'BootstrapS3Bucket'
                    - /*
              - Effect: Allow
                Action: s3:ListBucket
                Resource: !Join
                  - ''
                  - - 'arn:aws:s3:::'
                    - !If
                      - PANWScript
                      - !Join
                        - '-'
                        - - panw-aws-autoscale-v21
                          - !Ref 'AWS::Region'
                      - !Ref 'LambdaS3Bucket'
              - Effect: Allow
                Action: s3:GetObject
                Resource: !Join
                  - ''
                  - - 'arn:aws:s3:::'
                    - !If
                      - PANWScript
                      - !Join
                        - '-'
                        - - panw-aws-autoscale-v21
                          - !Ref 'AWS::Region'
                      - !Ref 'LambdaS3Bucket'
                    - /*
              - Effect: Allow
                Action:
                  - iam:UpdateAssumeRolePolicy
                  - iam:GetRole
                  - iam:PassRole
                  - iam:CreateServiceLinkedRole
                Resource:
                  - '*'
              - Effect: Allow
                Action:
                  - ec2:AllocateAddress
                  - ec2:AssociateAddress
                  - ec2:AssociateRouteTable
                  - ec2:AttachInternetGateway
                  - ec2:AttachNetworkInterface
                  - ec2:CreateNetworkInterface
                  - ec2:CreateTags
                  - ec2:CreateRoute
                  - ec2:CreateVpcEndpoint
                  - ec2:DeleteNetworkInterface
                  - ec2:DeleteRouteTable
                  - ec2:DeleteRoute
                  - ec2:DeleteSecurityGroup
                  - ec2:DeleteTags
                  - ec2:DeleteVpcEndpoints
                  - ec2:DeleteVpcPeeringConnection
                  - ec2:DescribeAddresses
                  - ec2:DescribeAvailabilityZones
                  - ec2:DescribeVpcEndpointServices
                  - ec2:DescribeVpcPeeringConnections
                  - ec2:DescribeInstanceAttribute
                  - ec2:DescribeInstanceStatus
                  - ec2:DescribeInstances
                  - ec2:DescribeImages
                  - ec2:DescribeNatGateways
                  - ec2:DescribeNetworkInterfaceAttribute
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DescribeTags
                  - ec2:DescribeVpcEndpoints
                  - ec2:DescribeVpcs
                  - ec2:DescribeSubnets
                  - ec2:DescribeSecurityGroups
                  - ec2:DetachInternetGateway
                  - ec2:DetachNetworkInterface
                  - ec2:DetachVolume
                  - ec2:DisassociateAddress
                  - ec2:DisassociateRouteTable
                  - ec2:ModifyNetworkInterfaceAttribute
                  - ec2:ModifySubnetAttribute
                  - ec2:MonitorInstances
                  - ec2:RebootInstances
                  - ec2:ReleaseAddress
                  - ec2:ReportInstanceStatus
                  - ec2:TerminateInstances
                  - ec2:DescribeIdFormat
                  - ec2:RunInstances
                Resource:
                  - '*'
              - Effect: Allow
                Action:
                  - events:*
                Resource:
                  - '*'
              - Effect: Allow
                Action:
                  - cloudwatch:*
                Resource:
                  - '*'
              - Effect: Allow
                Action:
                  - lambda:AddPermission
                  - lambda:CreateEventSourceMapping
                  - lambda:CreateFunction
                  - lambda:DeleteEventSourceMapping
                  - lambda:DeleteFunction
                  - lambda:GetEventSourceMapping
                  - lambda:ListEventSourceMappings
                  - lambda:RemovePermission
                  - lambda:UpdateEventSourceMapping
                  - lambda:UpdateFunctionCode
                  - lambda:UpdateFunctionConfiguration
                  - lambda:GetFunction
                  - lambda:ListFunctions
                Resource:
                  - '*'
              - Effect: Allow
                Action:
                  - autoscaling:*
                Resource:
                  - '*'
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:SendMessage
                  - sqs:SetQueueAttributes
                  - sqs:PurgeQueue
                  - sqs:DeleteMessage
                Resource:
                  - '*'
              - Effect: Allow
                Action:
                  - elasticloadbalancing:AddTags
                  - elasticloadbalancing:AttachLoadBalancerToSubnets
                  - elasticloadbalancing:ConfigureHealthCheck
                  - elasticloadbalancing:DescribeInstanceHealth
                  - elasticloadbalancing:DescribeLoadBalancerAttributes
                  - elasticloadbalancing:DescribeLoadBalancerPolicyTypes
                  - elasticloadbalancing:DescribeLoadBalancerPolicies
                  - elasticloadbalancing:DescribeLoadBalancers
                  - elasticloadbalancing:DescribeTags
                  - elasticloadbalancing:DetachLoadBalancerFromSubnets
                  - elasticloadbalancing:ModifyLoadBalancerAttributes
                  - elasticloadbalancing:RemoveTags
                  - elasticloadbalancing:DescribeTargetGroups
                Resource:
                  - '*'
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - cloudformation:DescribeStacks
                Resource: '*'
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutDestination
                  - logs:PutDestinationPolicy
                  - logs:PutLogEvents
                  - logs:PutMetricFilter
                Resource:
                  - '*'
              - Effect: Allow
                Action: dynamodb:*
                Resource: arn:aws:dynamodb:*:*:*
  FwInit:
    Type: AWS::Lambda::Function
    Properties:
      Handler: fw_init.lambda_handler
      Role: !GetAtt 'LambdaExecutionRole.Arn'
      Code:
        S3Bucket: !If
          - PANWScript
          - !Join
            - '-'
            - - panw-aws-autoscale-v21
              - !Ref 'AWS::Region'
          - !Ref 'LambdaS3Bucket'
        S3Key: !FindInMap
          - KeyMap
          - Key
          - Key
      Runtime: python2.7
      Timeout: '300'
      VpcConfig:
        SubnetIds:
          - !Ref 'LambdaSubnetAz1'
          - !Ref 'LambdaSubnetAz2'

        SecurityGroupIds:
          - !Ref 'VPCSecurityGroup'
    DependsOn:
      - LambdaExecutionRole
      - VPCSecurityGroup
  SetTransitGatewayIdRoute:
    Type: AWS::CloudFormation::CustomResource
    DependsOn:
      - "TGWAttachment"
      - "MGMTRouteTableAz1"
      - "MGMTRouteTableAz2"
      - "TrustRouteTableAz1"
      - "TrustRouteTableAz1"
      - "LambdaRouteTableAz1"
      - "LambdaRouteTableAz2"
    Properties:
      ServiceToken: !GetAtt 'TransitGatewayInitialiseLambda.Arn'
      MgtVPCRouteTable:
        Ref: "PropagatedTGWRouteTableID"
      FwInAtachment:
        Ref: "TGWAttachment"
      routes_to_add:
        Ref: "VpcSummaryRoute"
      route_tables:
        - Ref: "MGMTRouteTableAz1"
        - Ref: "MGMTRouteTableAz2"
        - Ref: "TrustRouteTableAz1"
        - Ref: "TrustRouteTableAz2"
        - Ref: "LambdaRouteTableAz1"
        - Ref: "LambdaRouteTableAz2"
  TransitGatewayInitialiseLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: Start the step function to initialise firewall
      Handler: setRouteTablelambda.lambda_handler
      Role: !GetAtt 'LambdaExecutionRole1.Arn'
      Layers:
        - !Ref 'ASLambdalayer'
      Code:
        S3Bucket: !If
          - PANWScript
          - !Join
            - '-'
            - - panw-aws-autoscale-v21
              - !Ref 'AWS::Region'
          - !Ref 'LambdaS3Bucket'
        S3Key: !FindInMap
          - KeyMap
          - Key
          - Key
      Environment:
        Variables:
          transitGatewayid: !Ref 'TGWID'
          region: !Ref 'AWS::Region'
          VpcSummaryRoute: !Ref 'VpcSummaryRoute'
      Runtime: python3.6
      Timeout: 150
    DependsOn:
      - MGMTRouteTableAz1
      - MGMTRouteTableAz2
      - TrustRouteTableAz1
      - TrustRouteTableAz1
      - TGWAttachment
  LambdaExecutionRole1:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: LambdaExecutionRolePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sts:AssumeRole
                Resource:
                  - '*'
              - Effect: Allow
                Action: s3:ListBucket
                Resource: !Join
                  - ''
                  - - 'arn:aws:s3:::'
                    - !Ref 'BootstrapS3Bucket'
                    - /*
              - Effect: Allow
                Action: s3:GetObject
                Resource: !Join
                  - ''
                  - - 'arn:aws:s3:::'
                    - !Ref 'BootstrapS3Bucket'
                    - /*
              - Effect: Allow
                Action:
                  - ec2:DescribeSubnets
                  - ec2:CreateRoute
                  - ec2:DeleteRoute
                  - ec2:DescribeVpcs
                Resource:
                  - '*'
              - Effect: Allow
                Action:
                  - events:*
                Resource:
                  - '*'
              - Effect: Allow
                Action:
                  - cloudwatch:*
                Resource:
                  - '*'
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                  - lambda:ListLayerVersions
                  - lambda:ListLayers
                  - lambda:AddPermission
                  - lambda:CreateEventSourceMapping
                  - lambda:CreateFunction
                  - lambda:DeleteEventSourceMapping
                  - lambda:DeleteFunction
                  - lambda:GetEventSourceMapping
                  - lambda:ListEventSourceMappings
                  - lambda:RemovePermission
                  - lambda:UpdateEventSourceMapping
                  - lambda:UpdateFunctionCode
                  - lambda:UpdateFunctionConfiguration
                  - lambda:GetFunction
                  - lambda:ListFunctions
                Resource:
                  - '*'
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:SendMessage
                  - sqs:SetQueueAttributes
                  - sqs:PurgeQueue
                Resource:
                  - '*'
              - Effect: Allow
                Action:
                  - elasticloadbalancing:AddTags
                  - elasticloadbalancing:AttachLoadBalancerToSubnets
                  - elasticloadbalancing:ConfigureHealthCheck
                  - elasticloadbalancing:DescribeInstanceHealth
                  - elasticloadbalancing:DescribeLoadBalancerAttributes
                  - elasticloadbalancing:DescribeLoadBalancerPolicyTypes
                  - elasticloadbalancing:DescribeLoadBalancerPolicies
                  - elasticloadbalancing:DescribeLoadBalancers
                  - elasticloadbalancing:DescribeTags
                  - elasticloadbalancing:DetachLoadBalancerFromSubnets
                  - elasticloadbalancing:ModifyLoadBalancerAttributes
                  - elasticloadbalancing:RemoveTags
                Resource:
                  - '*'
              - Effect: Allow
                Action:
                  - iam:PassRole
                  - iam:GetRole
                Resource:
                  - '*'
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - cloudformation:DescribeStacks
                Resource: '*'
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutDestination
                  - logs:PutDestinationPolicy
                  - logs:PutLogEvents
                  - logs:PutMetricFilter
                Resource:
                  - '*'
              - Effect: Allow
                Action:
                  - dynamodb:CreateTable
                  - dynamodb:DeleteItem
                  - dynamodb:DeleteTable
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                Resource:
                  - '*'
  LambdaENIQueue:
    Type: AWS::SQS::Queue
    DependsOn:
      - InitLambda
  LambdaENISNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Endpoint: !GetAtt 'FwInit.Arn'
          Protocol: lambda
    DependsOn:
      - FwInit
  LambdaENIPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt 'FwInit.Arn'
      Principal: sns.amazonaws.com
      SourceArn: !Ref 'LambdaENISNSTopic'
    DependsOn:
      - FwInit
      - LambdaENISNSTopic
  ASGNotifierRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - autoscaling.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
  ASGNotifierRolePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Ref 'AWS::StackName'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action: sns:Publish
            Resource: !Ref 'LambdaENISNSTopic'
      Roles:
        - !Ref 'ASGNotifierRole'
    DependsOn:
      - ASGNotifierRole
      - LambdaENISNSTopic
  TransitAssumeRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join
        - '-'
        - - TransitAssumeRole
          - !Ref 'AWS::StackName'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Join
                - ':'
                - - 'arn:aws:iam:'
                  - !Ref 'AWS::AccountId'
                  - root
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: !Join
            - '-'
            - - TransitAssumeRolePolicy
              - !Ref 'AWS::StackName'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: S3Actions
                Effect: Allow
                Action:
                  - s3:GetBucketAcl
                  - s3:GetBucketLocation
                  - s3:GetObject
                  - s3:GetObjectAcl
                  - s3:ListBucket
                  - s3:PutObject
                  - s3:PutObjectAcl
                  - s3:PutObjectTagging
                Resource:
                  - '*'
              - Sid: SQSActions
                Effect: Allow
                Action:
                  - sqs:SendMessage
                Resource:
                  - '*'
              - Effect: Allow
                Action:
                  - ec2:AcceptVpcPeeringConnection
                Resource:
                  - '*'
  InitLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: init.lambda_handler
      Role: !GetAtt 'LambdaExecutionRole.Arn'
      Code:
        S3Bucket: !If
          - PANWScript
          - !Join
            - '-'
            - - panw-aws-autoscale-v21
              - !Ref 'AWS::Region'
          - !Ref 'LambdaS3Bucket'
        S3Key: !FindInMap
          - KeyMap
          - Key
          - Key
      Runtime: python2.7
      Timeout: '300'
    DependsOn:
      - LambdaExecutionRole
  LambdaCustomResource:
    Type: AWS::CloudFormation::CustomResource
    Version: '1.0'
    DependsOn:
      - FwInit
      - InitLambda
      - TrustSecurityGroup
      - UntrustSecurityGroup
      - MgmtSecurityGroup
      - VPCSecurityGroup
      - TransitAssumeRole
    Properties:
      SubscriberAccounts: !Ref 'SubscriberAWSAccountNumber'
      TransitAssumeRoleName: !Ref 'TransitAssumeRole'
      TransitAssumeRoleArn: !GetAtt 'TransitAssumeRole.Arn'
      ServiceToken: !GetAtt 'InitLambda.Arn'
      StackName: !Ref 'AWS::StackName'
      Region: !Ref 'AWS::Region'
      VpcId: !Ref 'VPC'
      SubnetIDMgmt:
        - !Ref 'MGMTSubnetAz1'
        - !Ref 'MGMTSubnetAz2'

      SubnetIDUntrust:
        - !Ref 'UNTRUSTSubnet1'
        - !Ref 'UNTRUSTSubnet2'

      SubnetIDTrust:
        - !Ref 'TRUSTSubnet1'
        - !Ref 'TRUSTSubnet2'

      RouteTableIDTrust:
        - !Ref 'TrustRouteTableAz1'
        - !Ref 'TrustRouteTableAz2'

      MgmtSecurityGroup: !Ref 'MgmtSecurityGroup'
      UntrustSecurityGroup: !Ref 'UntrustSecurityGroup'
      TrustSecurityGroup: !Ref 'TrustSecurityGroup'
      VPCSecurityGroup: !Ref 'VPCSecurityGroup'
      KeyName: !Ref 'KeyName'
      ELBName: !Ref 'ELBName'
      ELBTargetGroupName: !Select
        - 1
        - !If
          - CreateELBTypeApp
          - !Split
            - /
            - !GetAtt 'PublicLoadBalancerTargetGroup.TargetGroupFullName'
          - !Split
            - /
            - !GetAtt 'NetworkLoadBalancerTargetGroup.TargetGroupFullName'
      FWInstanceType: !FindInMap
        - FWInstanceTypeMap
        - TypeM4
        - M4xlarge
      SSHLocation: !Ref 'SSHLocation'
      MinInstancesASG: !FindInMap
        - ASGScaleMap
        - MinInstances
        - ASG
      MaximumInstancesASG: !FindInMap
        - ASGScaleMap
        - MaxInstances
        - ASG
      ScaleUpThreshold: !FindInMap
        - ASGScaleMap
        - ScaleUpThreshold
        - ASG
      ScaleDownThreshold: !FindInMap
        - ASGScaleMap
        - ScaleDownThreshold
        - ASG
      ScalingParameter: !FindInMap
        - ASGScaleMap
        - ScalingParam
        - CPU
      ScalingPeriod: !FindInMap
        - ASGScaleMap
        - ScalingPeriod
        - ASG
      ImageID: !Ref 'PanFwAmiId'
      LambdaENISNSTopic: !Ref 'LambdaENISNSTopic'
      FirewallBootstrapRole: !Ref 'FirewallBootstrapInstanceProfile'
      LambdaExecutionRole: !Ref 'LambdaExecutionRole'
      ASGNotifierRole: !GetAtt 'ASGNotifierRole.Arn'
      ASGNotifierRolePolicy: !Ref 'ASGNotifierRolePolicy'
      LambdaS3Bucket: !Ref 'LambdaS3Bucket'
      BootstrapS3Bucket: !Ref 'BootstrapS3Bucket'
      PanS3KeyTpl: !FindInMap
        - KeyMap
        - Key
        - Key
      KeyPANWFirewall: !Ref 'KeyPANWFirewall'
      KeyPANWPanorama: !Ref 'KeyPANWPanorama'
      PanoramaAdminUser: !Ref 'PanoramaAdminUser'
      SubnetIDNATGW:
        - !Join
          - ','
          - - !Ref 'NATGWSubnetAz1'
            - !Ref 'NATGWSubnetAz2'

      SubnetIDLambda:
        - !Join
          - ','
          - - !Ref 'LambdaSubnetAz1'
            - !Ref 'LambdaSubnetAz2'


      FwInit: !Ref 'FwInit'
      InitLambda: !Ref 'InitLambda'
      LambdaENIQueue: !Ref 'LambdaENIQueue'
      Debug: !Ref 'Debug'
      FWLaunchTemplate: !Ref 'FWLaunchTemplate'
      NetworkLoadBalancerQueue: !Ref 'NetworkLoadBalancerQueue'
  FWLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Join
        - '-'
        - - !Select
            - 1
            - !If
              - CreateELBTypeApp
              - !Split
                - /
                - !GetAtt 'PublicLoadBalancerTargetGroup.TargetGroupFullName'
              - !Split
                - /
                - !GetAtt 'NetworkLoadBalancerTargetGroup.TargetGroupFullName'
          - PANW-Firewall-LaunchTemplate
      LaunchTemplateData:
        ImageId: !Ref 'PanFwAmiId'
        InstanceType: !FindInMap
          - FWInstanceTypeMap
          - TypeM4
          - M4xlarge
        KeyName: !Ref 'KeyName'
        SecurityGroupIds:
          - !GetAtt 'UntrustSecurityGroup.GroupId'
        IamInstanceProfile:
          Arn: !GetAtt 'FirewallBootstrapInstanceProfile.Arn'
        EbsOptimized: 'true'
        BlockDeviceMappings:
          - DeviceName: /dev/xvda
            Ebs:
              VolumeType: gp2
              DeleteOnTermination: 'true'
        UserData: !Base64
          Fn::Join:
            - ''
            - - vmseries-bootstrap-aws-s3bucket=
              - !Ref 'BootstrapS3Bucket'
Outputs:
  ScalingParameter:
    Value: !FindInMap
      - ASGScaleMap
      - ScalingParam
      - CPU
    Description: Scaling Parameter you have selected
  ELBName:
    Value: !Ref 'ELBName'
    Description: Elastic Application Load Balancer (Public) name
  ELBDNSName:
    Value: !GetAtt 'PublicLoadBalancer.DNSName'
    Description: Elastic Application Load Balancer (Public) DNS name
  KeyName:
    Value: !Ref 'KeyName'
    Description: Key Pair you have selected for SSH
  SSHLocation:
    Value: !Ref 'SSHLocation'
    Description: Make sure you SSH from this IP address
  BootstrapS3Bucket:
    Value: !Join
      - ''
      - - 'arn:aws:s3:::'
        - !Ref 'BootstrapS3Bucket'
    Description: Your Bootstrap bucket being used for this deployment
  LambdaS3Bucket:
    Value: !Join
      - ''
      - - 'arn:aws:s3:::'
        - !If
          - PANWScript
          - !Join
            - '-'
            - - !FindInMap
                - BucketRegionMap
                - LambdaRegion
                - DefaultRegion
              - !Ref 'AWS::Region'
          - !Ref 'LambdaS3Bucket'
    Description: Your Template/Lambda Code bucket being used for this deployment
  LambdaCodeFile:
    Value: !FindInMap
      - KeyMap
      - Key
      - Key
    Description: File name of the Lambda Code being run
  TransitAssumeRoleArn:
    Description: Transit Assume Role Arn, This will be given as a Parameter while
      launching application CFT
    Value: !GetAtt 'TransitAssumeRole.Arn'
  NetworkLoadBalancerQueue:
    Value: !Ref 'NetworkLoadBalancerQueue'
    Description: Network Load Balancer queue
