AWSTemplateFormatVersion: '2010-09-09'
Description: Creates an Transit Gateway with a Security VPC
Parameters:
  VpcSummaryRoute:
    Description: This is a hub vpc, use rfc-1918
    Type: String
    Default: rfc-1918
    AllowedValues:
      - rfc-1918
      - default
  splitroutes:
    Description: Share routing across both firewalls FW1 for Internet FW2 for east/west
    Type: String
    Default: yes
    AllowedValues:
      - yes
      - no
  KeyName:
    Description: AWS EC2 Intance ssh key
    Type: AWS::EC2::KeyPair::KeyName
  apikey:
    Description: Api key for firewall management
    Type: String
    Default: LUFRPT1qS2xCRmZ6WVMrREtrK00yUGt4dVRna2lkY1U9cmgyaE93L3VoZ2U3WUgxeFpGVE1wOUNtdlM2S0Z5Z25ObG8wbmZoNXpuWT0=
  VpcAzs:
    Type: List<AWS::EC2::AvailabilityZone::Name>
    Description: Select 2 AZs

  SSHLocation:
    Description: Restrict SSH & HTTPS access to the Web Servers (by default can be
      accessed from anywhere)
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: '0.0.0.0/0'
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid CIDR range of the form x.x.x.x/x.
  FWInstanceType:
    Type: String
    Default: m4.xlarge
    AllowedValues:
      - c4.xlarge
      - c4.2xlarge
      - c4.4xlarge
      - c4.8xlarge
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
      - c5.xlarge
      - c5.2xlarge
      - c5.4xlarge
    Description: Enter the instance type and size for the VM-Series firewall
  FWLicenseType:
    Type: String
    Default: Bundle1
    AllowedValues:
      - Bundle1
      - Bundle2
      - BYOL
    Description: Enter the license type for the Firewall
  PanFwAmiId:
    Type: AWS::EC2::Image::Id
    Default: 'ami-edb0fe94'
    Description: 'AMI List: https://www.paloaltonetworks.com/documentation/global/compatibility-matrix/vm-series-firewalls/aws-cft-amazon-machine-images-ami-list'
  RouteFailover:
    Description: Restore original route table entries when device recovers
    Type: String
    Default: yes
    AllowedValues:
      - yes
      - no
  BootstrapBucket:
    Type: String
    Description: Enter the name S3 Bucket Name containing the Bootstrap files
    Default: ireland-east-west-direct
  LambdaFunctionsBucketName:
    Description: Existing S3 bucket name which contains the Lambda funtions zip file
    Type: String
    Default: ireland-east-west-direct
  LambdaZipFile:
    Description: Lambda code zip filename which is stored in above mentioned Required
      parameters LambdaFunctionsBucketName
    Type: String
    Default: sec-only-lambda-combined.zip
  LambdaRate:
    Description: "The rate (frequency) that determines when CloudWatch Events runs\
      \ the rule that triggers the Route Monitor Lambda function.\n"
    Default: rate(1 minute)
    AllowedValues:
      - rate(1 minute)
      - rate(10 minutes)
      - rate(60 minutes)
    Type: String
  TGWID:
    Description: Transit Gateway resource ID (i.e. tgw-xxxxxx)
    Type: String
    Default: tgw-08ba52ffc2d66b864
  SecurityVPCRouteTable:
    Description: Transit Gateway Route Table associated with security VPCs (i.e. tgw-rtb-xxxxxx)
    Type: String
    Default: tgw-rtb-04b38d4cf50530033
  SpokeVPCRouteTable:
    Description: Transit Gateway Route Table associated with spoke VPCs (i.e. tgw-rtb-xxxxxx)
    Type: String
    Default: tgw-rtb-0806a3f895190d22a
Mappings:
  CidrBlockMap:
    VpcCidrBlock:
      CidrBlock: 192.168.254.0/24
    MgmtCidrBlock:
      CidrBlockAz1: 192.168.254.0/28
      CidrBlockAz2: 192.168.254.16/28
    UntrustCidrBlock:
      CidrBlockAz1: 192.168.254.32/28
      CidrBlockAz2: 192.168.254.48/28
    TrustCidrBlock:
      CidrBlockAz1: 192.168.254.64/28
      CidrBlockAz2: 192.168.254.80/28
    LambdaCidrBlock:
      CidrBlockAz1: 192.168.254.96/28
      CidrBlockAz2: 192.168.254.112/28
    TGWattachCidrBlock:
      CidrBlockAz1: 192.168.254.128/28
      CidrBlockAz2: 192.168.254.144/28
  Constants:
    S3URL:
      URL1: https://s3.amazonaws.com
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Route Monitor Configuration
        Parameters:
          - RouteFailover
          - preempt
          - splitroutes
          - VpcSummaryRoute
          - LambdaRate
      - Label:
          default: Security VPC Subnet Configuration
        Parameters:
          - VpcAzs
          - SecurityVPCCIDR
          - SecurityVPCName
          - MgmtSubnetIpBlocks
          - LambdaSubnetIpBlocks
          - TrustSubnetIpBlocks
          - UntrustSubnetIpBlocks
          - TGWattachIPBlocks
      - Label:
          default: Lambda Configuration
        Parameters:
          - LambdaZipFile
          - LambdaFunctionsBucketName
      - Label:
          default: Direct Attach Bootstrap Configuration
        Parameters:
          - BootstrapBucket
          - apikey
          - PanFwAmiId
      - Label:
          default: Autoscale Configuration
        Parameters:
          - LaunchAutoscaleVpc
          - AutoscaleBootstrapBucket
    ParameterLabels:
      PanFwAmiId:
        default: PANW firewall image ID
      BootstrapBucket:
        default: S3 bucket containing the bootstrap folders and files
      VpcSummaryRoute:
        default: This is a hub vpc, use rfc-1918
Resources:
  LambdaENIPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Join
        - '-'
        - - LambdaENIPolicy
          - !Ref 'AWS::StackName'
      Roles:
        - !Ref 'LambdaENIRole'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - ec2:DeleteSubnet
              - ec2:DescribeAddresses
              - ec2:DescribeInstances
              - ec2:DetachNetworkInterface
              - ec2:DescribeInstanceAttribute
              - ec2:DeleteNetworkInterface
              - ec2:DescribeTransitGateways
              - ec2:DescribeInstanceCreditSpecifications
              - ec2:DescribeSecurityGroups
              - ec2:DescribeImages
              - ec2:DescribeTransitGatewayAttachments
              - ec2:SearchTransitGatewayRoutes
              - ec2:DescribeNetworkInterfaces
              - ec2:DescribeTransitGatewayRouteTables
              - ec2:DescribeNetworkInterfaceAttribute
              - ec2:DescribeVpcs
              - ec2:GetTransitGatewayRouteTablePropagations
              - ec2:DescribeNetworkInterfacePermissions
              - ec2:DescribeSubnets
              - ec2:DescribeNetworkAcls
              - ec2:DescribeRouteTables
              - ec2:DescribeVpnGateways
              - ec2:GetTransitGatewayRouteTableAssociations
              - ec2:DescribeInstanceStatus
            Resource: '*'
          - Sid: Logs
            Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource:
              - '*'
  LambdaENIRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join
        - '-'
        - - ENILambdaExecutionRole
          - !Ref 'AWS::StackName'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
    DependsOn: []
  DeleteLambdaENI:
    Type: AWS::Lambda::Function
    Properties:
      Description: Sets the Untrust NIC IP object and sets trust interface static
        route NH
      Handler: DeleteLambdaEni.handler
      Role: !GetAtt 'LambdaENIRole.Arn'
      Layers:
        - !Ref 'ASLambdalayer'
      Code:
        S3Bucket: !Ref 'LambdaFunctionsBucketName'
        S3Key: !Ref 'LambdaZipFile'
      Environment:
        Variables:
          fw1TrustIp: !GetAtt 'FW1TrustNetworkInterface.PrimaryPrivateIpAddress'
          fw2TrustIp: !GetAtt 'FW2TrustNetworkInterface.PrimaryPrivateIpAddress'
          fw1UntrustIp: !GetAtt 'FW1UntrustNetworkInterface.PrimaryPrivateIpAddress'
          fw2UntrustIp: !GetAtt 'FW2UntrustNetworkInterface.PrimaryPrivateIpAddress'
          trustAZ1Subnet: !Ref 'TRUSTSubnet1'
          trustAZ2Subnet: !Ref 'TRUSTSubnet2'
          apikey: !Ref 'apikey'
          VpcSummaryRoute: !Ref 'VpcSummaryRoute'
      Runtime: python3.6
      Timeout: 150
    DependsOn:
      - LambdaENIRole
      - LambdaENIPolicy
  DeleteLambdaENIResource:
    Type: AWS::CloudFormation::CustomResource
    DependsOn: []
    Properties:
      VPCID: !Ref 'SecurityVPC'
      region: !Ref 'AWS::Region'
      ServiceToken: !GetAtt 'DeleteLambdaENI.Arn'
  ASLambdalayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      CompatibleRuntimes:
        - python3.6
        - python3.7
      Content:
        S3Bucket: !Ref 'LambdaFunctionsBucketName'
        S3Key: layer.zip
      Description: Autoscale Layer
      LayerName: as-layer
      LicenseInfo: MIT
  LambdaSchedulePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Sub '${TransitGatewayRouteMonitorLambda.Arn}'
      Principal: events.amazonaws.com
      SourceArn: !Sub '${LambdaSchedule.Arn}'
    DependsOn:
      - LambdaSchedule
  LambdaSchedule:
    Type: AWS::Events::Rule
    Properties:
      Description: "A schedule for the Route Monitor Lambda function..\n"
      ScheduleExpression: !Ref 'LambdaRate'
      State: ENABLED
      Targets:
        - Arn: !Sub '${TransitGatewayRouteMonitorLambda.Arn}'
          Id: LambdaSchedule
    DependsOn:
      - TransitGatewayRouteMonitorLambda
  sgWideOpen:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Wide open security group
      SecurityGroupIngress:
        - IpProtocol: '-1'
          CidrIp: '0.0.0.0/0'
      SecurityGroupEgress:
        - IpProtocol: '-1'
          CidrIp: '0.0.0.0/0'
      VpcId: !Ref 'SecurityVPC'
  sgJumpbox:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SG for Jumpbox
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: '0.0.0.0/0'
        - IpProtocol: tcp
          FromPort: 3389
          ToPort: 3389
          CidrIp: '0.0.0.0/0'
      SecurityGroupEgress:
        - IpProtocol: '-1'
          CidrIp: '0.0.0.0/0'
      VpcId: !Ref 'SecurityVPC'
  sgLambda:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SG for Jumpbox
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: '0.0.0.0/0'
      SecurityGroupEgress:
        - IpProtocol: '-1'
          CidrIp: '0.0.0.0/0'
      VpcId: !Ref 'SecurityVPC'
  SecurityVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !FindInMap
        - CidrBlockMap
        - VpcCidrBlock
        - CidrBlock
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - tgw-security
  SecurityVPCAttachment:
    Type: AWS::EC2::TransitGatewayAttachment
    DependsOn:
      - TGWattach1
      - TGWattach2
    Properties:
      VpcId: !Ref 'SecurityVPC'
      TransitGatewayId: !Ref 'TGWID'
      SubnetIds:
        - !Ref 'TGWattach1'
        - !Ref 'TGWattach2'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - attach-sec
  SecurityVPCAssociation:
    Type: AWS::EC2::TransitGatewayRouteTableAssociation
    DependsOn:
      - SecurityVPCAttachment
    Properties:
      TransitGatewayRouteTableId: !Ref 'SecurityVPCRouteTable'
      TransitGatewayAttachmentId: !Ref 'SecurityVPCAttachment'
  SecurityVPCPropagation:
    Type: AWS::EC2::TransitGatewayRouteTablePropagation
    Properties:
      TransitGatewayAttachmentId: !Ref 'SecurityVPCAttachment'
      TransitGatewayRouteTableId: !Ref 'SecurityVPCRouteTable'
    DependsOn:
      - SecurityVPCAttachment
  SpokeVPCPropagation:
    Type: AWS::EC2::TransitGatewayRouteTablePropagation
    Properties:
      TransitGatewayAttachmentId: !Ref 'SecurityVPCAttachment'
      TransitGatewayRouteTableId: !Ref 'SpokeVPCRouteTable'
    DependsOn:
      - SecurityVPCAttachment

  MGMTSubnetAz1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - '0'
        - !Ref 'VpcAzs'
      MapPublicIpOnLaunch: true
      VpcId: !Ref 'SecurityVPC'
      CidrBlock: !FindInMap
        - CidrBlockMap
        - MgmtCidrBlock
        - CidrBlockAz1
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - sec-mgmtA
    DependsOn:
      - SecurityVPC
  MGMTSubnetAz2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - '1'
        - !Ref 'VpcAzs'
      MapPublicIpOnLaunch: true
      VpcId: !Ref 'SecurityVPC'
      CidrBlock: !FindInMap
        - CidrBlockMap
        - MgmtCidrBlock
        - CidrBlockAz2
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - sec-mgmtB
    DependsOn:
      - SecurityVPC
  LambdaSubnetAz1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - '0'
        - !Ref 'VpcAzs'
      MapPublicIpOnLaunch: true
      VpcId: !Ref 'SecurityVPC'
      CidrBlock: !FindInMap
        - CidrBlockMap
        - LambdaCidrBlock
        - CidrBlockAz1
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - sec-lambdaA
    DependsOn:
      - SecurityVPC
  LambdaSubnetAz2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - '1'
        - !Ref 'VpcAzs'
      MapPublicIpOnLaunch: true
      VpcId: !Ref 'SecurityVPC'
      CidrBlock: !FindInMap
        - CidrBlockMap
        - LambdaCidrBlock
        - CidrBlockAz2
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - sec-lambdaB
    DependsOn:
      - SecurityVPC
  UNTRUSTSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - '0'
        - !Ref 'VpcAzs'
      VpcId: !Ref 'SecurityVPC'
      CidrBlock: !FindInMap
        - CidrBlockMap
        - UntrustCidrBlock
        - CidrBlockAz1
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - sec-untrustA
    DependsOn:
      - SecurityVPC
  UNTRUSTSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - '1'
        - !Ref 'VpcAzs'
      VpcId: !Ref 'SecurityVPC'
      CidrBlock: !FindInMap
        - CidrBlockMap
        - UntrustCidrBlock
        - CidrBlockAz2
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - sec-untrustB
    DependsOn:
      - SecurityVPC
  TRUSTSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - '0'
        - !Ref 'VpcAzs'
      VpcId: !Ref 'SecurityVPC'
      CidrBlock: !FindInMap
        - CidrBlockMap
        - TrustCidrBlock
        - CidrBlockAz1
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - sec-trustA
    DependsOn:
      - SecurityVPC
  TRUSTSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - '1'
        - !Ref 'VpcAzs'
      VpcId: !Ref 'SecurityVPC'
      CidrBlock: !FindInMap
        - CidrBlockMap
        - TrustCidrBlock
        - CidrBlockAz2
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - sec-trustB
    DependsOn:
      - SecurityVPC
  TGWattach1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - '0'
        - !Ref 'VpcAzs'
      VpcId: !Ref 'SecurityVPC'
      CidrBlock: !FindInMap
        - CidrBlockMap
        - TGWattachCidrBlock
        - CidrBlockAz1
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - sec-tgwattachA
    DependsOn:
      - SecurityVPC
  TGWattach2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - '1'
        - !Ref 'VpcAzs'
      VpcId: !Ref 'SecurityVPC'
      CidrBlock: !FindInMap
        - CidrBlockMap
        - TGWattachCidrBlock
        - CidrBlockAz2
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - sec-tgwattachB
    DependsOn:
      - SecurityVPC
  fromTGWRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'SecurityVPC'
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - rt-fromTGW
    DependsOn:
      - SecurityVPC


  MGMTRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'SecurityVPC'
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - MGMTRouteTable1
    DependsOn:
      - SecurityVPC
  MGMTRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'SecurityVPC'
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - MGMTRouteTable2
    DependsOn:
      - SecurityVPC
  LambdaRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'SecurityVPC'
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - LambdaRouteTable1
    DependsOn:
      - SecurityVPC
  LambdaRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'SecurityVPC'
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - LambdaRouteTable2
    DependsOn:
      - SecurityVPC
  UNTRUSTRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'SecurityVPC'
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - rt-outbound
    DependsOn:
      - SecurityVPC
  toTGWRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'SecurityVPC'
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - rt-ToTGW
    DependsOn:
      - SecurityVPC

  MGMT1SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'MGMTSubnetAz1'
      RouteTableId: !Ref 'MGMTRouteTable1'
    DependsOn:
      - MGMTRouteTable1
  MGMT2SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'MGMTSubnetAz2'
      RouteTableId: !Ref 'MGMTRouteTable2'
    DependsOn:
      - MGMTRouteTable2
  Lambda1SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'LambdaSubnetAz1'
      RouteTableId: !Ref 'LambdaRouteTable1'
    DependsOn:
      - LambdaRouteTable1
  Lambda2SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'LambdaSubnetAz2'
      RouteTableId: !Ref 'LambdaRouteTable2'
    DependsOn:
      - LambdaRouteTable2
  UNTRUSTSubnetRouteTableAssociationAz1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'UNTRUSTSubnet1'
      RouteTableId: !Ref 'UNTRUSTRouteTable'
    DependsOn:
      - UNTRUSTRouteTable
      - UNTRUSTSubnet1
  UNTRUSTSubnetRouteTableAssociationAz2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'UNTRUSTSubnet2'
      RouteTableId: !Ref 'UNTRUSTRouteTable'
    DependsOn:
      - UNTRUSTRouteTable
      - UNTRUSTSubnet2
  TRUSTSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'TRUSTSubnet1'
      RouteTableId: !Ref 'toTGWRouteTable'
    DependsOn:
      - TRUSTSubnet1
      - toTGWRouteTable
  TRUSTSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'TRUSTSubnet2'
      RouteTableId: !Ref 'toTGWRouteTable'
    DependsOn:
      - TRUSTSubnet2
      - toTGWRouteTable
  TGWAtachRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'TGWattach1'
      RouteTableId: !Ref 'fromTGWRouteTable'
    DependsOn:
      - TGWattach1
  TGWAtachRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'TGWattach2'
      RouteTableId: !Ref 'fromTGWRouteTable'
    DependsOn:
      - TGWattach2
  MGMTRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref 'MGMTRouteTable1'
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref 'NATGw1'
    DependsOn:
      - NATGw1
      - MGMTRouteTable1
  MGMTRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref 'MGMTRouteTable2'
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref 'NATGw2'
    DependsOn:
      - NATGw2
      - MGMTRouteTable2
  LambdaRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref 'LambdaRouteTable1'
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref 'NATGw1'
    DependsOn:
      - LambdaRouteTable1
  LambdaRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref 'LambdaRouteTable2'
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref 'NATGw2'
    DependsOn:
      - LambdaRouteTable2
  UNTRUSTRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref 'UNTRUSTRouteTable'
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref 'InternetGateway'
    DependsOn:
      - InternetGateway
      - UNTRUSTRouteTable
  FromTGWDefRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref 'fromTGWRouteTable'
      DestinationCidrBlock: '0.0.0.0/0'
      NetworkInterfaceId: !Ref 'FW1TrustNetworkInterface'
    DependsOn:
      - FW1TrustNetworkInterface
      - fromTGWRouteTable
  FromTGW10NetsRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref 'fromTGWRouteTable'
      DestinationCidrBlock: '10.0.0.0/8'
      NetworkInterfaceId: !Ref 'FW2TrustNetworkInterface'
    DependsOn:
      - FW2TrustNetworkInterface
      - fromTGWRouteTable
  FromTGW172NetsRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref 'fromTGWRouteTable'
      DestinationCidrBlock: '172.16.0.0/12'
      NetworkInterfaceId: !Ref 'FW2TrustNetworkInterface'
    DependsOn:
      - FW2TrustNetworkInterface
      - fromTGWRouteTable
  FromTGW192NetsRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref 'fromTGWRouteTable'
      DestinationCidrBlock: '192.16.0.0/24'
      NetworkInterfaceId: !Ref 'FW2TrustNetworkInterface'
    DependsOn:
      - FW2TrustNetworkInterface
      - fromTGWRouteTable

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Network
          Value: MGMT
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - InternetGateway
  GatewayToInternet:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref 'SecurityVPC'
      InternetGatewayId: !Ref 'InternetGateway'
    DependsOn:
      - InternetGateway
      - SecurityVPC
  EIP1:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
    DependsOn:
      - SecurityVPC
      - GatewayToInternet
      - InternetGateway
  EIP2:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
    DependsOn:
      - SecurityVPC
      - GatewayToInternet
      - InternetGateway
  EIP3:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
    DependsOn:
      - SecurityVPC
      - GatewayToInternet
      - InternetGateway
  EIP4:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
    DependsOn:
      - SecurityVPC
      - GatewayToInternet
      - InternetGateway
  associateEIP1:
    Type: AWS::EC2::EIPAssociation
    Properties:
      AllocationId: !GetAtt 'EIP1.AllocationId'
      NetworkInterfaceId: !Ref 'FW1UntrustNetworkInterface'
  associateEIP2:
    Type: AWS::EC2::EIPAssociation
    Properties:
      AllocationId: !GetAtt 'EIP2.AllocationId'
      NetworkInterfaceId: !Ref 'FW2UntrustNetworkInterface'
  BootstrapRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: BootstrapRolePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: s3:ListBucket
                Resource: !Join
                  - ''
                  - - 'arn:aws:s3:::'
                    - !Ref 'BootstrapBucket'
              - Effect: Allow
                Action: s3:GetObject
                Resource: !Join
                  - ''
                  - - 'arn:aws:s3:::'
                    - !Ref 'BootstrapBucket'
                    - /*
  BootstrapInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref 'BootstrapRole'
  FW1ManagementNetworkInterface:
    Type: AWS::EC2::NetworkInterface
    Properties:
      Description: AWS FW1 MGMT
      SubnetId: !Ref 'MGMTSubnetAz1'
      SourceDestCheck: false
      GroupSet:
        - !Ref 'sgWideOpen'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - AWSFW1Mgt
    DependsOn:
      - sgWideOpen
  FW1UntrustNetworkInterface:
    Type: AWS::EC2::NetworkInterface
    Properties:
      Description: AWS FW1 E1/1
      SubnetId: !Ref 'UNTRUSTSubnet1'
      SourceDestCheck: false
      GroupSet:
        - !Ref 'sgWideOpen'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - AWSFW1Untrust
    DependsOn:
      - sgWideOpen
  FW1TrustNetworkInterface:
    Type: AWS::EC2::NetworkInterface
    Properties:
      Description: AWS FW1 E1/2
      SubnetId: !Ref 'TRUSTSubnet1'
      SourceDestCheck: false
      GroupSet:
        - !Ref 'sgWideOpen'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - AWSFW1Trust
    DependsOn:
      - sgWideOpen
  FW2ManagementNetworkInterface:
    Type: AWS::EC2::NetworkInterface
    Properties:
      Description: AWS FW2 MGMT
      SubnetId: !Ref 'MGMTSubnetAz2'
      SourceDestCheck: false
      GroupSet:
        - !Ref 'sgWideOpen'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - AWSFW2Mgt
    DependsOn:
      - sgWideOpen
  FW2UntrustNetworkInterface:
    Type: AWS::EC2::NetworkInterface
    Properties:
      Description: AWS FW2 E1/1
      SubnetId: !Ref 'UNTRUSTSubnet2'
      SourceDestCheck: false
      GroupSet:
        - !Ref 'sgWideOpen'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - AWSFW2Untrust
    DependsOn:
      - sgWideOpen
  FW2TrustNetworkInterface:
    Type: AWS::EC2::NetworkInterface
    Properties:
      Description: AWS FW2 E1/2
      SubnetId: !Ref 'TRUSTSubnet2'
      SourceDestCheck: false
      GroupSet:
        - !Ref 'sgWideOpen'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - AWSFW2Trust
    DependsOn:
      - sgWideOpen

  NATGw1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt 'EIP3.AllocationId'
      SubnetId: !Ref 'UNTRUSTSubnet1'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - NatGw1
  NATGw2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt 'EIP4.AllocationId'
      SubnetId: !Ref 'UNTRUSTSubnet2'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - NatGw2
  FW1Instance:
    Type: AWS::EC2::Instance
    Properties:
      DisableApiTermination: false
      IamInstanceProfile: !Ref 'BootstrapInstanceProfile'
      InstanceInitiatedShutdownBehavior: stop
      EbsOptimized: true
      ImageId: !Ref 'PanFwAmiId'
      InstanceType: !Ref 'FWInstanceType'
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeType: gp2
            DeleteOnTermination: true
            VolumeSize: 60
      KeyName: !Ref 'KeyName'
      Monitoring: false
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - FW1
      NetworkInterfaces:
        - NetworkInterfaceId: !Ref 'FW1UntrustNetworkInterface'
          DeviceIndex: '1'
        - NetworkInterfaceId: !Ref 'FW1ManagementNetworkInterface'
          DeviceIndex: '0'
        - NetworkInterfaceId: !Ref 'FW1TrustNetworkInterface'
          DeviceIndex: '2'
      UserData: !Base64
        Fn::Join:
          - ''
          - - vmseries-bootstrap-aws-s3bucket=
            - !Ref 'BootstrapBucket'
    DependsOn:
      - FW1ManagementNetworkInterface
      - FW1UntrustNetworkInterface
      - FW1TrustNetworkInterface
      - associateEIP1
      - NATGw2
      - NATGw1
  FW2Instance:
    Type: AWS::EC2::Instance
    Properties:
      DisableApiTermination: false
      IamInstanceProfile: !Ref 'BootstrapInstanceProfile'
      InstanceInitiatedShutdownBehavior: stop
      EbsOptimized: true
      ImageId: !Ref 'PanFwAmiId'
      InstanceType: !Ref 'FWInstanceType'
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeType: gp2
            DeleteOnTermination: true
            VolumeSize: 60
      KeyName: !Ref 'KeyName'
      Monitoring: false
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - FW2
      NetworkInterfaces:
        - NetworkInterfaceId: !Ref 'FW2UntrustNetworkInterface'
          DeviceIndex: '1'
        - NetworkInterfaceId: !Ref 'FW2ManagementNetworkInterface'
          DeviceIndex: '0'
        - NetworkInterfaceId: !Ref 'FW2TrustNetworkInterface'
          DeviceIndex: '2'
      UserData: !Base64
        Fn::Join:
          - ''
          - - vmseries-bootstrap-aws-s3bucket=
            - !Ref 'BootstrapBucket'
    DependsOn:
      - FW2ManagementNetworkInterface
      - FW2UntrustNetworkInterface
      - FW2TrustNetworkInterface
      - FW1Instance
      - associateEIP2
      - NATGw2
      - NATGw1
  InitFWStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      DefinitionString: !Sub
        - |-
          {
             "Comment": "Step function to loop waiting for firewall to start up",
             "StartAt": "InitialiseFw",
             "States": {
                "InitialiseFw": {
                   "Type": "Task",
                   "Resource": "${InitialiseFwLambdaArn}",
                   "Retry": [ {
                      "ErrorEquals": ["FWNotUpException"],
                      "IntervalSeconds": 90,
                      "MaxAttempts": 5,
                      "BackoffRate": 2.0
                   } ],
                   "End": true
                }
             }
          }
        - InitialiseFwLambdaArn: !GetAtt 'InitialiseFwLambda.Arn'
      RoleArn: !GetAtt 'StateMachineExecutionRole.Arn'
    DependsOn:
      - InitialiseFwLambda
      - FW1Instance
      - FW2Instance
  StateMachineExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join
        - '-'
        - - StateMachineExecutionRole
          - !Ref 'AWS::StackName'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: !Join
                - .
                - - states
                  - !Ref 'AWS::Region'
                  - amazonaws.com
            Action: sts:AssumeRole
      Path: /
  StateMachineExecutionPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Join
        - '-'
        - - StateMachineExecutionPolicy
          - !Ref 'AWS::StackName'
      Roles:
        - !Ref 'StateMachineExecutionRole'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - lambda:InvokeFunction
            Resource: '*'
  InitialiseFwLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: Sets the Untrust NIC IP object and sets trust interface static
        route NH
      Handler: InitialiseFwLambda.lambda_handler
      Role: !GetAtt 'LambdaExecutionRole.Arn'
      Layers:
        - !Ref 'ASLambdalayer'
      Code:
        S3Bucket: !Ref 'LambdaFunctionsBucketName'
        S3Key: !Ref 'LambdaZipFile'
      Environment:
        Variables:
          fw1TrustIp: !GetAtt 'FW1TrustNetworkInterface.PrimaryPrivateIpAddress'
          fw2TrustIp: !GetAtt 'FW2TrustNetworkInterface.PrimaryPrivateIpAddress'
          fw1UntrustIp: !GetAtt 'FW1UntrustNetworkInterface.PrimaryPrivateIpAddress'
          fw2UntrustIp: !GetAtt 'FW2UntrustNetworkInterface.PrimaryPrivateIpAddress'
          trustAZ1Subnet: !Ref 'TRUSTSubnet1'
          trustAZ2Subnet: !Ref 'TRUSTSubnet2'
          apikey: !Ref 'apikey'
          VpcSummaryRoute: !Ref 'VpcSummaryRoute'
      VpcConfig:
        SecurityGroupIds:
          - !Ref 'sgLambda'
        SubnetIds:
          - !Ref 'LambdaSubnetAz1'
          - !Ref 'LambdaSubnetAz2'
      Runtime: python3.6
      Timeout: 150
    DependsOn:
      - FW1Instance
      - FW2Instance
  SetTransitGatewayIdRoute:
    Type: AWS::CloudFormation::CustomResource
    DependsOn:
      - toTGWRouteTable
      - FW2Instance
    Properties:
      ServiceToken: !GetAtt 'TransitGatewayInitialiseLambda.Arn'
      routes_to_add:
        Ref: "VpcSummaryRoute"
      route_tables:
        - Ref: "MGMTRouteTable1"
        - Ref: "MGMTRouteTable2"
        - Ref: "toTGWRouteTable"
        - Ref: "LambdaRouteTable1"
        - Ref: "LambdaRouteTable2"
  TransitGatewayInitialiseLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: Start the step function to initialise firewall
      Handler: SecOnlyTransitGatewayInitialiseLambda.lambda_handler
      Role: !GetAtt 'LambdaExecutionRole.Arn'
      Layers:
        - !Ref 'ASLambdalayer'
      Code:
        S3Bucket: !Ref 'LambdaFunctionsBucketName'
        S3Key: !Ref 'LambdaZipFile'
      Environment:
        Variables:
          transitGatewayid: !Ref 'TGWID'
          region: !Ref 'AWS::Region'
          InitFWStateMachine: !Ref 'InitFWStateMachine'
      Runtime: python3.6
      Timeout: 150
    DependsOn:
      - InitFWStateMachine
  TransitGatewayRouteMonitorLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: Monitor Route Tables to provide failover
      Handler: TransitGatewayRouteMonitorLambda.lambda_handler
      Role: !GetAtt 'LambdaExecutionRole.Arn'
      Layers:
        - !Ref 'ASLambdalayer'
      Code:
        S3Bucket: !Ref 'LambdaFunctionsBucketName'
        S3Key: !Ref 'LambdaZipFile'
      Environment:
        Variables:
          preempt: !Ref 'RouteFailover'
          VpcSummaryRoute: !Ref 'VpcSummaryRoute'
          fw2Trusteni: !Ref 'FW2TrustNetworkInterface'
          fw1Trusteni: !Ref 'FW1TrustNetworkInterface'
          fromTGWRouteTableId: !Ref 'fromTGWRouteTable'
          fw1Trustip: !GetAtt 'FW1TrustNetworkInterface.PrimaryPrivateIpAddress'
          fw2Trustip: !GetAtt 'FW2TrustNetworkInterface.PrimaryPrivateIpAddress'
          apikey: !Ref 'apikey'
          splitroutes: !Ref 'splitroutes'
          Region: !Ref 'AWS::Region'
      VpcConfig:
        SecurityGroupIds:
          - !Ref 'sgLambda'
        SubnetIds:
          - !Ref 'LambdaSubnetAz1'
          - !Ref 'LambdaSubnetAz2'
      Runtime: python3.6
      Timeout: 150
    DependsOn:
      - LambdaSubnetAz1
      - LambdaSubnetAz2
      - FW1Instance
      - FW2Instance
      - fromTGWRouteTable
      - FW1TrustNetworkInterface
      - FW2TrustNetworkInterface
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join
        - '-'
        - - TransitLambdaExecutionRole
          - !Ref 'AWS::StackName'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
  LambdaExecutionPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Join
        - '-'
        - - TransitLambdaExecutionPolicy
          - !Ref 'AWS::StackName'
      Roles:
        - !Ref 'LambdaExecutionRole'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: STSAccumRole
            Effect: Allow
            Action:
              - sts:AssumeRole
            Resource:
              - '*'
          - Sid: InvokeLambda
            Effect: Allow
            Action:
              - lambda:InvokeFunction
              - lambda:ListLayerVersions
              - lambda:ListLayers
              - lambda:DeleteFunction
              - lambda:CreateFunction
            Resource:
              - '*'
          - Action:
              - iam:UpdateAssumeRolePolicy
              - iam:GetRole
              - iam:PassRole
            Resource:
              - '*'
            Effect: Allow
            Sid: IAMActions
          - Action:
              - cloudformation:*
            Resource:
              - '*'
            Effect: Allow
            Sid: CloudFormationActions
          - Action:
              - ec2:*
            Resource:
              - '*'
            Effect: Allow
            Sid: EC2FullAccess
          - Sid: StateMachineActions
            Effect: Allow
            Action:
              - states:ListExecutions
              - states:StartExecution
            Resource:
              - '*'
          - Sid: Logs
            Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource:
              - '*'
          - Sid: S3Actions
            Effect: Allow
            Action:
              - s3:GetBucketAcl
              - s3:GetBucketLocation
              - s3:GetObject
              - s3:GetObjectAcl
              - s3:ListBucket
              - s3:PutObject
              - s3:PutObjectAcl
              - s3:PutObjectTagging
              - s3:DeleteBucket
              - s3:DeleteBucketPolicy
              - s3:DeleteObject
            Resource:
              - '*'
Outputs:
  KeyName:
    Value: !Ref 'KeyName'
    Description: Key Pair you have selected for SSH
  VPCID:
    Value: !Ref 'SecurityVPC'
    Description: VPC ID
  Fw1PublicIP:
    Value: !Ref 'EIP1'
    Description: Firewall 1 Untrust Interface Public IP
  Fw2PublicIP:
    Value: !Ref 'EIP2'
    Description: Firewall 1 Untrust Interface Public IP
  Fw1MgmtIP:
    Value: !GetAtt 'FW1ManagementNetworkInterface.PrimaryPrivateIpAddress'
    Description: Firewall 1 Untrust Interface Public IP
  Fw2MgmtIP:
    Value: !GetAtt 'FW2ManagementNetworkInterface.PrimaryPrivateIpAddress'
    Description: Firewall 2 Untrust Interface Public IP
